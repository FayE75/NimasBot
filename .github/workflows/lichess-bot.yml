name: Lichess Bot

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

env:
  LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}

jobs:
  deploy-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 350
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies (clang, llvm-profdata, ccache, etc.)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y build-essential clang git make pkg-config ccache || true
        python -m pip install --upgrade pip wheel setuptools
        if [ -f requirements.txt ]; then
          echo "Installing python requirements from requirements.txt"
          pip install -r requirements.txt
        else
          echo "No requirements.txt found — installing minimal runtime deps (pyyaml, aiohttp, tenacity, websockets, requests)"
          pip install pyyaml aiohttp tenacity websockets requests
        fi

        if command -v llvm-profdata >/dev/null 2>&1; then
          echo "llvm-profdata already available: $(command -v llvm-profdata)"
        else
          echo "llvm-profdata not found — trying common apt packages (llvm, llvm-18, llvm-19)..."
          sudo apt-get update -qq
          sudo apt-get install -y llvm || true
          sudo apt-get install -y llvm-18 llvm-18-tools || true
          sudo apt-get install -y llvm-19 llvm-19-tools || true

          if command -v llvm-profdata >/dev/null 2>&1; then
            echo "Installed llvm-profdata from apt: $(command -v llvm-profdata)"
          else
            echo "System apt did not provide llvm-profdata — falling back to download prebuilt LLVM tarball..."
            LLVM_VER="18.1.6"
            TARBALL="clang+llvm-${LLVM_VER}-x86_64-linux-gnu-ubuntu-22.04.tar.xz"
            DL_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VER}/${TARBALL}"

            echo "Attempting download: ${DL_URL}"
            mkdir -p /tmp/llvmtool
            if wget -q -O "/tmp/${TARBALL}" "${DL_URL}"; then
              tar -xf "/tmp/${TARBALL}" -C /tmp/llvmtool
              EXDIR=$(find /tmp/llvmtool -maxdepth 1 -type d -name "clang+llvm-*" -print -quit || true)
              if [ -n "$EXDIR" ]; then
                export PATH="$EXDIR/bin:$PATH"
                echo "Using downloaded LLVM from $EXDIR"
                echo "llvm-profdata is now: $(command -v llvm-profdata || echo 'not found')"
              else
                echo "Extraction succeeded but could not find extracted directory. Skipping."
              fi
            else
              echo "Download of prebuilt LLVM failed. Skipping fallback download."
            fi
          fi
        fi

        if command -v llvm-profdata >/dev/null 2>&1; then
          echo "✅ llvm-profdata available at: $(command -v llvm-profdata)"
        else
          echo "⚠️ llvm-profdata NOT found. PGO merge will be skipped and build will proceed without PGO."
        fi

        if command -v ccache >/dev/null 2>&1; then
          ccache -V || true
          ccache -M 5G || true
          ccache -s || true
        else
          echo "ccache not found (unexpected) — builds will be uncached."
        fi

    - name: Build Omega (clone + make — optional instrumented PGO using engine bench)
      env:
        PERFORM_GENERATE: 0
      run: |
        set -euo pipefail
        set -x
        echo "=== START: clone + build Omega (no manual FEN/perft unless PERFORM_GENERATE=1) ==="
        PGO_RUN_TIME=${PGO_RUN_TIME:-120}
        ROOT="$(pwd)"
        rm -rf Omega || true
        git clone https://x-access-token:${{ secrets.OMEGA_PAT }}@github.com/FayE75/Omega.git Omega || git clone https://github.com/FayE75/Omega.git Omega || { echo "Clone failed"; exit 1; }
        if [ ! -d Omega/src ]; then
          echo "ERROR: Omega/src not found after clone"; ls -la Omega || true; exit 1
        fi
        cd Omega/src

        if command -v ccache >/dev/null 2>&1; then
          export CC="ccache clang"
          export CXX="ccache clang++"
        else
          export CC="clang"
          export CXX="clang++"
        fi
        export CCACHE_DIR="${HOME}/.ccache"

        COMMON_FLAGS="-O3 -march=native -mtune=native -flto=thin -funroll-loops -fomit-frame-pointer"
        export CFLAGS="$COMMON_FLAGS"
        export CXXFLAGS="$COMMON_FLAGS"

        if [ "${PERFORM_GENERATE:-0}" -eq 1 ]; then
          echo "Running instrumented (generate) build — CFLAGS=$CFLAGS"
          INSTR_EXTRAS="-fprofile-instr-generate -fcoverage-mapping"
          INSTR_LDFLAGS="-fprofile-instr-generate -fcoverage-mapping -flto=thin"
          if make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang EXTRACXXFLAGS="${INSTR_EXTRAS}" EXTRALDFLAGS="${INSTR_LDFLAGS}" | tee build-instr.log; then
            echo "Instrumented build succeeded."
          else
            echo "Instrumented build failed; tail build-instr.log:"
            tail -n 200 build-instr.log || true
            exit 1
          fi

          instr_bin=$(find . -maxdepth 6 -type f -executable -iname 'omega*' -o -iname 'stockfish*' -print -quit || true)
          if [ -z "$instr_bin" ]; then
            instr_bin=$(find . -maxdepth 6 -type f -executable -iname 'sf*' -print -quit || true)
          fi
          if [ -z "$instr_bin" ]; then
            echo "ERROR: instrumented binary not found"; tail -n 200 build-instr.log || true; exit 1
          fi

          export LLVM_PROFILE_FILE="${HOME}/pgo-%p.profraw"

          BENCH_TIME=12
          timeout ${BENCH_TIME}s "${instr_bin}" bench > /tmp/pgo_bench_instrumented.txt 2>&1 || true
          tail -n 20 /tmp/pgo_bench_instrumented.txt || true

          START_TS=$(date +%s)
          END_TS=$((START_TS + PGO_RUN_TIME))
          echo "Instrumented workload window: ${PGO_RUN_TIME}s"

          while [ $(date +%s) -lt $END_TS ]; do
            echo "Running built-in bench iteration at $(date +%T)..."
            if timeout 120s "${instr_bin}" bench >> /tmp/pgo_bench_instrumented.txt 2>&1; then
              echo "bench iteration finished."
            else
              echo "bench failed / timed out — fallback to UCI single-run to produce profraw"
              THREADS="$(nproc 2>/dev/null || echo 1)"
              HASH_MB=256
              printf "uci\nsetoption name Threads value %d\nsetoption name Hash value %d\nucinewgame\nisready\nposition startpos\ngo depth 6\nquit\n" "$THREADS" "$HASH_MB" | "${instr_bin}" >> /tmp/pgo_bench_instrumented.txt 2>&1 || true
            fi

            now=$(date +%s)
            if [ $now -ge $END_TS ]; then
              echo "PGO runtime window reached."
              break
            fi
            sleep 0.2
          done

          tail -n 30 /tmp/pgo_bench_instrumented.txt || true

          echo "Merging .profraw files..."
          if compgen -G "${HOME}/pgo-*.profraw" >/dev/null 2>&1; then
            if command -v llvm-profdata >/dev/null 2>&1; then
              llvm-profdata merge -o "${HOME}/merged.profdata" ${HOME}/pgo-*.profraw || { echo "llvm-profdata merge failed (continuing fallback)"; ls -la ${HOME}/*.profraw || true; }
              echo "merged.profdata: $(ls -la ${HOME}/merged.profdata || true)"
            else
              echo "llvm-profdata not available - skipping merge"
            fi
          else
            echo "No profraw files found"
          fi
        fi

        make clean || true

        if [ -f "${HOME}/merged.profdata" ] && command -v llvm-profdata >/dev/null 2>&1; then
          echo "Using merged.profdata for final build."
          USE_EXTRAS="-fprofile-instr-use=${HOME}/merged.profdata -fcoverage-mapping"
          USE_LDFLAGS="-fprofile-instr-use=${HOME}/merged.profdata -flto=thin"
          make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang EXTRACXXFLAGS="${USE_EXTRAS}" EXTRALDFLAGS="${USE_LDFLAGS}" | tee build-final.log || { tail -n 300 build-final.log || true; exit 1; }
        else
          echo "No merged.profdata -> building optimized non-PGO binary."
          make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang | tee build-final.log || { echo "profile-build failed; trying non-profile build"; tail -n 300 build-final.log || true; make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang | tee build-final.log || { tail -n 400 build-final.log || true; exit 1; }; }
        fi

        found=$(find . -maxdepth 6 -type f -executable -iname 'stockfish*' -o -iname 'omega*' -o -iname 'sf*' -print -quit || true)
        if [ -z "$found" ]; then
          echo "No engine binary found after build; showing last 400 lines of build-final.log"; tail -n 400 build-final.log || true
          exit 1
        fi
        echo "Found engine binary: $found"
        strip "$found" || true
        mkdir -p "${ROOT}/engines"
        cp "$found" "${ROOT}/engines/sf" || { echo "Copy failed"; ls -la . || true; exit 1; }
        chmod +x "${ROOT}/engines/sf" || true
        echo "Omega build complete."

        make ARCH=x86-64-bmi2 COMP=clang profileclean || { rc=$?; echo "profileclean exited with code $rc (non-fatal)."; }
        echo "profileclean exit status shown above."

    - name: Build Fairy-Stockfish (clone + make — optional instrumented PGO using engine bench)
      env:
        PERFORM_GENERATE: 0
      run: |
        set -euo pipefail
        set -x
        echo "=== START: clone + build Fairy-Stockfish (no manual FEN/perft unless PERFORM_GENERATE=1) ==="
        PGO_RUN_TIME=${PGO_RUN_TIME:-120}
        ROOT="$(pwd)"
        rm -rf Fairy-Stockfish || true
        git clone https://github.com/fairy-stockfish/Fairy-Stockfish.git Fairy-Stockfish || { echo "Clone failed"; exit 1; }
        if [ ! -d Fairy-Stockfish/src ]; then
          echo "ERROR: Fairy-Stockfish/src not found after clone"; ls -la Fairy-Stockfish || true; exit 1
        fi
        cd Fairy-Stockfish/src

        if command -v ccache >/dev/null 2>&1; then
          export CC="ccache clang"
          export CXX="ccache clang++"
        else
          export CC="clang"
          export CXX="clang++"
        fi
        export CCACHE_DIR="${HOME}/.ccache"

        COMMON_FLAGS="-O3 -march=native -mtune=native -flto=thin -funroll-loops -fomit-frame-pointer"
        export CFLAGS="$COMMON_FLAGS"
        export CXXFLAGS="$COMMON_FLAGS"

        if [ "${PERFORM_GENERATE:-0}" -eq 1 ]; then
          echo "Running instrumented (generate) build — CFLAGS=$CFLAGS"
          INSTR_EXTRAS="-fprofile-instr-generate -fcoverage-mapping"
          INSTR_LDFLAGS="-fprofile-instr-generate -fcoverage-mapping -flto=thin"
          if make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang EXTRACXXFLAGS="${INSTR_EXTRAS}" EXTRALDFLAGS="${INSTR_LDFLAGS}" | tee build-instr.log; then
            echo "Instrumented build succeeded."
          else
            echo "Instrumented build failed; tail build-instr.log:"
            tail -n 200 build-instr.log || true
            exit 1
          fi

          instr_bin=$(find . -maxdepth 6 -type f -executable -iname 'fairy*' -o -iname 'stockfish*' -o -iname 'fsf*' -print -quit || true)
          if [ -z "$instr_bin" ]; then
            instr_bin=$(find . -maxdepth 6 -type f -executable -print -quit || true)
          fi
          if [ -z "$instr_bin" ]; then
            echo "ERROR: instrumented binary not found"; tail -n 200 build-instr.log || true; exit 1
          fi

          export LLVM_PROFILE_FILE="${HOME}/pgo-%p.profraw"

          BENCH_TIME=12
          timeout ${BENCH_TIME}s "${instr_bin}" bench > /tmp/pgo_bench_instrumented_fairy.txt 2>&1 || true
          tail -n 20 /tmp/pgo_bench_instrumented_fairy.txt || true

          START_TS=$(date +%s)
          END_TS=$((START_TS + PGO_RUN_TIME))
          echo "Instrumented workload window: ${PGO_RUN_TIME}s"

          while [ $(date +%s) -lt $END_TS ]; do
            echo "Running built-in bench iteration at $(date +%T)..."
            if timeout 120s "${instr_bin}" bench >> /tmp/pgo_bench_instrumented_fairy.txt 2>&1; then
              echo "bench iteration finished."
            else
              echo "bench failed / timed out — fallback to UCI single-run to produce profraw"
              THREADS="$(nproc 2>/dev/null || echo 1)"
              HASH_MB=256
              printf "uci\nsetoption name Threads value %d\nsetoption name Hash value %d\nucinewgame\nisready\nposition startpos\ngo depth 6\nquit\n" "$THREADS" "$HASH_MB" | "${instr_bin}" >> /tmp/pgo_bench_instrumented_fairy.txt 2>&1 || true
            fi

            now=$(date +%s)
            if [ $now -ge $END_TS ]; then
              echo "PGO runtime window reached."
              break
            fi
            sleep 0.2
          done

          tail -n 30 /tmp/pgo_bench_instrumented_fairy.txt || true

          echo "Merging .profraw files..."
          if compgen -G "${HOME}/pgo-*.profraw" >/dev/null 2>&1; then
            if command -v llvm-profdata >/dev/null 2>&1; then
              llvm-profdata merge -o "${HOME}/merged.profdata" ${HOME}/pgo-*.profraw || { echo "llvm-profdata merge failed (continuing fallback)"; ls -la ${HOME}/*.profraw || true; }
              echo "merged.profdata: $(ls -la ${HOME}/merged.profdata || true)"
            else
              echo "llvm-profdata not available - skipping merge"
            fi
          else
            echo "No profraw files found"
          fi
        fi

        make clean || true

        if [ -f "${HOME}/merged.profdata" ] && command -v llvm-profdata >/dev/null 2>&1; then
          echo "Using merged.profdata for final build."
          USE_EXTRAS="-fprofile-instr-use=${HOME}/merged.profdata -fcoverage-mapping"
          USE_LDFLAGS="-fprofile-instr-use=${HOME}/merged.profdata -flto=thin"
          make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang EXTRACXXFLAGS="${USE_EXTRAS}" EXTRALDFLAGS="${USE_LDFLAGS}" | tee build-final.log || { tail -n 300 build-final.log || true; exit 1; }
        else
          echo "No merged.profdata -> building optimized non-PGO binary."
          make -j$(nproc) profile-build ARCH=x86-64-bmi2 COMP=clang | tee build-final.log || { echo "profile-build failed; trying non-profile build"; tail -n 300 build-final.log || true; make -j$(nproc) build ARCH=x86-64-bmi2 COMP=clang | tee build-final.log || { tail -n 400 build-final.log || true; exit 1; }; }
        fi

        found=$(find . -maxdepth 6 -type f -executable -iname 'fairy*' -o -iname 'stockfish*' -o -iname 'fsf*' -print -quit || true)
        if [ -z "$found" ]; then
          found=$(find . -maxdepth 6 -type f -executable -print -quit || true)
        fi
        if [ -z "$found" ]; then
          tail -n 200 build-final.log || true
          echo "ERROR: built binary not found"
          exit 1
        fi
        echo "Found engine binary: $found"
        strip "$found" || true
        mkdir -p "${ROOT}/engines"
        cp "$found" "${ROOT}/engines/fsf" || { echo "Copy failed"; exit 1; }
        chmod +x "${ROOT}/engines/fsf"
        echo "Fairy build complete."

        make ARCH=x86-64-bmi2 COMP=clang profileclean || { rc=$?; echo "profileclean exited with code $rc (non-fatal)."; }
        echo "profileclean exit status shown above."

    - name: Setup engines permissions
      run: |
        echo "🔧 Setting engine permissions..."
        chmod +x engines/fsf || true
        chmod +x engines/sf || true
        chmod +x engines/ShashChess39 || true || true
        echo "📋 Listing engines:"
        ls -la engines/ || true

    - name: Run built-in bench (uses default positions from each engine)
      run: |
        echo "=== Running engine bench (default positions) ==="
        mkdir -p bench_outputs
        if [ -x "./engines/fsf" ]; then
          echo "-> Fairy (engines/fsf) bench (default suite)" | tee bench_outputs/fsf_bench.txt
          ./engines/fsf bench 2>&1 | tee -a bench_outputs/fsf_bench.txt || true
        else
          echo "engines/fsf not found or not executable" | tee bench_outputs/fsf_bench.txt
        fi

        if [ -x "./engines/sf" ]; then
          echo "-> Omega/Stockfish (engines/sf) bench (default suite)" | tee bench_outputs/sf_bench.txt
          ./engines/sf bench 2>&1 | tee -a bench_outputs/sf_bench.txt || true
        else
          echo "engines/sf not found or not executable" | tee bench_outputs/sf_bench.txt
        fi

    - name: Setup token & config
      run: |
        python3 << 'PY'
        import yaml, os, sys
        try:
            cfg_path = 'config.yml'
            try:
                with open(cfg_path, 'r') as f:
                    config = yaml.safe_load(f) or {}
            except FileNotFoundError:
                config = {}
            config['token'] = os.environ.get('LICHESS_TOKEN', '')
            config.setdefault('engine', {})
            config['engine']['dir'] = './engines'
            config['engine']['name'] = 'fsf'
            with open(cfg_path, 'w') as f:
                yaml.dump(config, f, default_flow_style=False)
            print("✅ Configuration successful")
        except Exception as e:
            print(f"❌ Error: {e}")
            sys.exit(1)
        PY

    - name: Launch bot
      timeout-minutes: 340
      run: |
        echo "🤖 Starting bot..."
        python3 user_interface.py matchmaking
